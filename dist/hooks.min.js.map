{"version":3,"file":"hooks.min.js","sources":["../src/hooks.ts"],"sourcesContent":["import { Hook, Test } from 'mocha';\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\nexport function registerSessionIdHook(sessionIdLookup) {\n    return function () {\n        if (this.test instanceof Hook &&\n            !this.test.title.startsWith('\"before each\"')) {\n            console.warn('Can only register session id in the beforeEach hook');\n            return;\n        }\n        registerSessionId.apply(this, [sessionIdLookup()]);\n    };\n}\nexport function registerSessionId(sessionId) {\n    // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n    // we want to emit the event on the currentTest, not the test (which is actually the hook)\n    if (this.test instanceof Test) {\n        this.test?.emit(SESSION_ID_EVENT, JSON.stringify({ fullTitle: this.test?.fullTitle(), sessionId }));\n    }\n    else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n        this.currentTest?.emit(SESSION_ID_EVENT, JSON.stringify({ fullTitle: this.currentTest?.fullTitle(), sessionId }));\n    }\n}\n//# sourceMappingURL=hooks.js.map"],"names":["SESSION_ID_EVENT","registerSessionId","sessionId","this","test","Test","emit","JSON","stringify","fullTitle","Hook","currentTest","sessionIdLookup","title","startsWith","console","warn","apply"],"mappings":"qSACa,MAAAA,EAAmB,+BAWzB,SAASC,EAAkBC,GAG1BC,KAAKC,gBAAgBC,OACrBF,KAAKC,MAAME,KAAKN,EAAkBO,KAAKC,UAAU,CAAEC,UAAWN,KAAKC,MAAMK,YAAaP,eAEjFC,KAAKC,gBAAgBM,EAAAA,MAAQP,KAAKQ,uBAAuBN,EAAAA,MAC9DF,KAAKQ,aAAaL,KAAKN,EAAkBO,KAAKC,UAAU,CAAEC,UAAWN,KAAKQ,aAAaF,YAAaP,cAE5G,oEAnBO,SAA+BU,GAClC,OAAO,WACCT,KAAKC,gBAAgBM,EAAIA,OACxBP,KAAKC,KAAKS,MAAMC,WAAW,iBAC5BC,QAAQC,KAAK,uDAGjBf,EAAkBgB,MAAMd,KAAM,CAACS,KACvC,CACA"}