{"version":3,"file":"hooks.min.js","sources":["../src/hooks.ts"],"sourcesContent":["import { Hook, Test } from 'mocha';\n\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\n\nexport function registerSessionIdHook(\n  sessionIdLookup: () => string | undefined\n) {\n  return function (this: Mocha.Context) {\n    if (\n      this.test instanceof Hook &&\n      !this.test.title.startsWith('\"before each\"')\n    ) {\n      console.warn('Can only register session id in the beforeEach hook');\n      return;\n    }\n    registerSessionId.apply(this, [sessionIdLookup()]);\n  };\n}\n\nexport function registerSessionId(\n  this: Mocha.Context,\n  sessionId: string | undefined\n) {\n  // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n  // we want to emit the event on the currentTest, not the test (which is actually the hook)\n  if (this.test instanceof Test) {\n    this.test?.emit(\n      SESSION_ID_EVENT,\n      JSON.stringify({ fullTitle: this.test?.fullTitle(), sessionId })\n    );\n  } else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n    this.currentTest?.emit(\n      SESSION_ID_EVENT,\n      JSON.stringify({ fullTitle: this.currentTest?.fullTitle(), sessionId })\n    );\n  }\n}\n"],"names":["SESSION_ID_EVENT","registerSessionId","sessionId","this","test","Test","emit","JSON","stringify","fullTitle","Hook","currentTest","sessionIdLookup","title","startsWith","console","warn","apply"],"mappings":"qSAEa,MAAAA,EAAmB,+BAiB1B,SAAUC,EAEdC,GAIIC,KAAKC,gBAAgBC,OACvBF,KAAKC,MAAME,KACTN,EACAO,KAAKC,UAAU,CAAEC,UAAWN,KAAKC,MAAMK,YAAaP,eAE7CC,KAAKC,gBAAgBM,EAAAA,MAAQP,KAAKQ,uBAAuBN,EAAAA,MAClEF,KAAKQ,aAAaL,KAChBN,EACAO,KAAKC,UAAU,CAAEC,UAAWN,KAAKQ,aAAaF,YAAaP,cAGjE,oEAhCM,SACJU,GAEA,OAAO,WAEHT,KAAKC,gBAAgBM,EAAIA,OACxBP,KAAKC,KAAKS,MAAMC,WAAW,iBAE5BC,QAAQC,KAAK,uDAGff,EAAkBgB,MAAMd,KAAM,CAACS,KACjC,CACF"}