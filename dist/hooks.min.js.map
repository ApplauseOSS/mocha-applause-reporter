{"version":3,"file":"hooks.min.js","sources":["../src/hooks.ts"],"sourcesContent":["import { Hook, Test } from 'mocha';\n\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\n\nexport function registerSessionIdHook(\n  sessionIdLookup: () => string | undefined\n) {\n  return function (this: Mocha.Context) {\n    if (\n      this.test instanceof Hook &&\n      !this.test.title.startsWith('\"before each\"')\n    ) {\n      console.warn('Can only register session id in the beforeEach hook');\n      return;\n    }\n    registerSessionId.apply(this, [sessionIdLookup()]);\n  };\n}\n\nexport function registerSessionId(\n  this: Mocha.Context,\n  sessionId: string | undefined\n) {\n  // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n  // we want to emit the event on the currentTest, not the test (which is actually the hook)\n  if (this.test instanceof Test) {\n    this.test?.emit(SESSION_ID_EVENT, sessionId);\n  } else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n    this.currentTest?.emit(SESSION_ID_EVENT, sessionId);\n  }\n}\n"],"names":["SESSION_ID_EVENT","registerSessionId","sessionId","this","test","Test","emit","Hook","currentTest","sessionIdLookup","title","startsWith","console","warn","apply"],"mappings":"qSAEa,MAAAA,EAAmB,+BAiB1B,SAAUC,EAEdC,GAIIC,KAAKC,gBAAgBC,OACvBF,KAAKC,MAAME,KAAKN,EAAkBE,GACzBC,KAAKC,gBAAgBG,EAAAA,MAAQJ,KAAKK,uBAAuBH,EAAAA,MAClEF,KAAKK,aAAaF,KAAKN,EAAkBE,EAE7C,oEA1BM,SACJO,GAEA,OAAO,WAEHN,KAAKC,gBAAgBG,EAAIA,OACxBJ,KAAKC,KAAKM,MAAMC,WAAW,iBAE5BC,QAAQC,KAAK,uDAGfZ,EAAkBa,MAAMX,KAAM,CAACM,KACjC,CACF"}