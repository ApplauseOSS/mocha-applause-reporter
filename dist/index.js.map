{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\n\n// eslint-disable-next-line node/no-extraneous-import\nimport {\n  AutoApi,\n  TestResultStatus,\n  TestRunHeartbeatService,\n} from 'auto-api-client-js';\nimport { Runner } from 'mocha';\nimport { ApplauseOptions } from './applause-options';\nimport { Test } from 'mocha';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\nconst _options = require(process.cwd() + '/applause.json');\nconst options = _options as ApplauseOptions;\n\n// import * as cli from 'mocha/lib/cli';\nexport default class ApplauseReporter extends reporters.Base {\n  private readonly TEST_RAIL_CASE_ID_PREFIX: string = 'TestRail-';\n  private readonly APPLAUSE_CASE_ID_PREFIX: string = 'Applause-';\n\n  private autoapi: AutoApi;\n  private testRunId: Promise<number> = Promise.resolve(0);\n  private heartbeat?: TestRunHeartbeatService;\n  private heartbeatStarted?: Promise<void>;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n  private uidSubmissionMap: Record<string, Promise<void>> = {};\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(runner: Runner) {\n    super(runner);\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      testRailOptions: options.testRail,\n    });\n    runner.once(Runner.constants.EVENT_SUITE_BEGIN, suite => {\n      // Parse each test case name from the suite\n      const tests: string[] = [];\n      suite.eachTest(t =>\n        tests.push(this.parseTestCaseName(t.fullTitle()).testCaseName)\n      );\n      void this.runnerStart(tests);\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n      .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n        void this.startTestResult(testcase.id, testcase.fullTitle());\n      })\n      .on(Runner.constants.EVENT_TEST_PASS, (testcase: Test) => {\n        void this.submitTestResult(testcase.id, TestResultStatus.PASSED);\n      })\n      .on(Runner.constants.EVENT_TEST_FAIL, (testcase: Test, error: Error) => {\n        void this.submitTestResult(\n          testcase.id,\n          TestResultStatus.FAILED,\n          error.message\n        );\n      })\n      .once(Runner.constants.EVENT_RUN_END, () => {\n        void this.runnerEnd();\n      });\n  }\n\n  runnerStart(tests: string[]): void {\n    this.testRunId = this.autoapi\n      .startTestRun({\n        tests,\n      })\n      .then(response => {\n        const runId = response.data.runId;\n        console.log('Test Run %d initialized', runId);\n        this.heartbeat = new TestRunHeartbeatService(runId, this.autoapi);\n        this.heartbeatStarted = this.heartbeat.start();\n        return runId;\n      });\n  }\n\n  startTestResult(id: string, testCaseName: string): void {\n    const parsedTestCase = this.parseTestCaseName(testCaseName);\n    this.uidToResultIdMap[id] = this.testRunId\n      ?.then(runId =>\n        this.autoapi.startTestCase({\n          testCaseName: parsedTestCase.testCaseName,\n          testCaseId: parsedTestCase.testRailTestCaseId,\n          testRunId: runId,\n          providerSessionIds: [],\n        })\n      )\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  submitTestResult(\n    id: string,\n    status: TestResultStatus,\n    errorMessage?: string\n  ): void {\n    this.uidSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId =>\n      this.autoapi.submitTestResult({\n        status: status,\n        testResultId: resultId,\n        failureReason: errorMessage,\n      })\n    );\n  }\n\n  async runnerEnd(): Promise<void> {\n    // Wait for the test run to be created and the heartbeat to be started\n    await this.testRunId;\n    await this.heartbeatStarted;\n    // End the heartbeat\n    await this.heartbeat?.end();\n    let resultIds: number[] = [];\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n\n    // Wait for all results to be created\n    void (await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch((reason: Error) => {\n        console.error(\n          `Unable to retrieve Applause TestResultIds ${reason.message}`\n        );\n      }));\n    const resultPromises: Promise<void>[] = Object.values(\n      this.uidSubmissionMap\n    );\n\n    // Wait for the results to be submitted\n    void (await Promise.all(resultPromises));\n\n    // Finally, end the test run\n    await this.autoapi.endTestRun((await this.testRunId) || 0);\n\n    // Fetch the provider session asset links\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n\n  private parseTestCaseName(testCaseName: string): ParsedTestCaseName {\n    // Split the name on spaces. We will reassemble after parsing out the other ids\n    const tokens = testCaseName.split(' ');\n    let testRailTestCaseId: string | undefined;\n    let applauseTestCaseId: string | undefined;\n    tokens.forEach(token => {\n      if (token?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)) {\n        if (testRailTestCaseId !== undefined) {\n          console.warn('Multiple TestRail case ids detected in testCase name');\n        }\n        testRailTestCaseId = token.substring(\n          this.TEST_RAIL_CASE_ID_PREFIX.length\n        );\n      } else if (token?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)) {\n        if (applauseTestCaseId !== undefined) {\n          console.warn('Multiple Applause case ids detected in testCase name');\n        }\n        applauseTestCaseId = token.substring(\n          this.APPLAUSE_CASE_ID_PREFIX.length\n        );\n      }\n    });\n    return {\n      applauseTestCaseId,\n      testRailTestCaseId,\n      testCaseName: tokens\n        .filter(\n          token =>\n            token !==\n            `${this.TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`\n        )\n        .filter(\n          token =>\n            token !==\n            `${this.APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`\n        )\n        .join(' '),\n    };\n  }\n}\n\ninterface ParsedTestCaseName {\n  testCaseName: string;\n  testRailTestCaseId?: string;\n  applauseTestCaseId?: string;\n}\n"],"names":["reporters","AutoApi","Runner","TestResultStatus","TestRunHeartbeatService","writeFileSync","pathJoin"],"mappings":"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"}