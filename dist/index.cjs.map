{"version":3,"file":"index.cjs","sources":["../src/hooks.ts","../src/index.ts"],"sourcesContent":["import { Hook, Test } from 'mocha';\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\nexport function registerSessionIdHook(sessionIdLookup) {\n    return function () {\n        if (this.test instanceof Hook &&\n            !this.test.title.startsWith('\"before each\"')) {\n            console.warn('Can only register session id in the beforeEach hook');\n            return;\n        }\n        registerSessionId.apply(this, [sessionIdLookup()]);\n    };\n}\nexport function registerSessionId(sessionId) {\n    // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n    // we want to emit the event on the currentTest, not the test (which is actually the hook)\n    if (this.test instanceof Test) {\n        this.test?.emit(SESSION_ID_EVENT, JSON.stringify({ fullTitle: this.test?.fullTitle(), sessionId }));\n    }\n    else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n        this.currentTest?.emit(SESSION_ID_EVENT, JSON.stringify({ fullTitle: this.currentTest?.fullTitle(), sessionId }));\n    }\n}\n//# sourceMappingURL=hooks.js.map","import { reporters } from 'mocha';\nimport { ApplauseReporter, TestResultStatus, loadConfig, } from 'applause-reporter-common';\nimport { Runner } from 'mocha';\nimport { SESSION_ID_EVENT } from './hooks.ts';\nexport default class ApplauseMochaReporter extends reporters.Base {\n    reporter;\n    sessionIdMap = new Map();\n    constructor(runner) {\n        super(runner);\n        const config = loadConfig();\n        this.reporter = new ApplauseReporter(config);\n        runner.once(Runner.constants.EVENT_SUITE_BEGIN, suite => {\n            // Parse each test case name from the suite\n            const tests = [];\n            suite.eachTest(t => tests.push(t.fullTitle()));\n            void this.reporter.runnerStart(tests);\n        });\n        /*\n         * make reporter to write to the output stream by default\n         */\n        runner\n            .on(Runner.constants.EVENT_TEST_BEGIN, (testcase) => {\n            this.listenToSessionId(testcase);\n            void this.reporter.startTestCase(testcase.id, testcase.fullTitle());\n        })\n            .on(Runner.constants.EVENT_TEST_PASS, (testcase) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.PASSED, { providerSessionGuids: this.sessionIdMap.get(testcase.id) || [] });\n        })\n            .on(Runner.constants.EVENT_TEST_PENDING, (testcase) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.SKIPPED, { providerSessionGuids: this.sessionIdMap.get(testcase.id) || [] });\n        })\n            .on(Runner.constants.EVENT_TEST_FAIL, (testcase, error) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.FAILED, {\n                failureReason: error.message,\n                providerSessionGuids: this.sessionIdMap.get(testcase.id) || [],\n            });\n        })\n            .once(Runner.constants.EVENT_RUN_END, () => {\n            void this.reporter.runnerEnd();\n        });\n    }\n    recordSessionId(id, sessionId) {\n        this.sessionIdMap.set(id, [\n            ...(this.sessionIdMap.get(id) || []),\n            sessionId,\n        ]);\n    }\n    listenToSessionId(test) {\n        test.on(SESSION_ID_EVENT, (sessionId) => this.recordSessionId(test.id, sessionId));\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["reporters","loadConfig","ApplauseReporter","Runner","TestResultStatus"],"mappings":";;;;;AACO,MAAM,gBAAgB,GAAG,8BAA8B;;ACG/C,MAAM,qBAAqB,SAASA,eAAS,CAAC,IAAI,CAAC;AAClE,IAAI,QAAQ,CAAC;AACb,IAAI,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7B,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,MAAM,CAAC,CAAC;AACtB,QAAQ,MAAM,MAAM,GAAGC,iCAAU,EAAE,CAAC;AACpC,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIC,uCAAgB,CAAC,MAAM,CAAC,CAAC;AACrD,QAAQ,MAAM,CAAC,IAAI,CAACC,YAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,KAAK,IAAI;AACjE;AACA,YAAY,MAAM,KAAK,GAAG,EAAE,CAAC;AAC7B,YAAY,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AAC3D,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAClD,SAAS,CAAC,CAAC;AACX;AACA;AACA;AACA,QAAQ,MAAM;AACd,aAAa,EAAE,CAACA,YAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,QAAQ,KAAK;AACjE,YAAY,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAC7C,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;AAChF,SAAS,CAAC;AACV,aAAa,EAAE,CAACA,YAAM,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,QAAQ,KAAK;AAChE,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,EAAEC,uCAAgB,CAAC,MAAM,EAAE,EAAE,oBAAoB,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC9J,SAAS,CAAC;AACV,aAAa,EAAE,CAACD,YAAM,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,QAAQ,KAAK;AACnE,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,EAAEC,uCAAgB,CAAC,OAAO,EAAE,EAAE,oBAAoB,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC/J,SAAS,CAAC;AACV,aAAa,EAAE,CAACD,YAAM,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,KAAK,KAAK;AACvE,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,EAAEC,uCAAgB,CAAC,MAAM,EAAE;AAC1F,gBAAgB,aAAa,EAAE,KAAK,CAAC,OAAO;AAC5C,gBAAgB,oBAAoB,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE;AAC9E,aAAa,CAAC,CAAC;AACf,SAAS,CAAC;AACV,aAAa,IAAI,CAACD,YAAM,CAAC,SAAS,CAAC,aAAa,EAAE,MAAM;AACxD,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;AAC3C,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,eAAe,CAAC,EAAE,EAAE,SAAS,EAAE;AACnC,QAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE;AAClC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;AAChD,YAAY,SAAS;AACrB,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,iBAAiB,CAAC,IAAI,EAAE;AAC5B,QAAQ,IAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,SAAS,KAAK,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC;AAC3F,KAAK;AACL;;;;"}