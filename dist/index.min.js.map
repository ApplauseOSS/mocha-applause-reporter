{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\n\n// eslint-disable-next-line node/no-extraneous-import\nimport {\n  AutoApi,\n  TestResultStatus,\n  TestRunHeartbeatService,\n} from 'auto-api-client-js';\nimport { Runner } from 'mocha';\nimport { ApplauseOptions } from './applause-options';\nimport { Test } from 'mocha';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\nconst _options = require(process.cwd() + '/applause.json');\nconst options = _options as ApplauseOptions;\n\n// import * as cli from 'mocha/lib/cli';\nexport default class ApplauseReporter extends reporters.Base {\n  private readonly TEST_RAIL_CASE_ID_PREFIX: string = 'TestRail-';\n  private readonly APPLAUSE_CASE_ID_PREFIX: string = 'Applause-';\n\n  private autoapi: AutoApi;\n  private testRunId: Promise<number> = Promise.resolve(0);\n  private heartbeat?: TestRunHeartbeatService;\n  private heartbeatStarted?: Promise<void>;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n  private uidSubmissionMap: Record<string, Promise<void>> = {};\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(runner: Runner) {\n    super(runner);\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      testRailOptions: options.testRail,\n    });\n    runner.once(Runner.constants.EVENT_SUITE_BEGIN, suite => {\n      // Parse each test case name from the suite\n      const tests: string[] = [];\n      suite.eachTest(t =>\n        tests.push(this.parseTestCaseName(t.fullTitle()).testCaseName)\n      );\n      void this.runnerStart(tests);\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n      .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n        void this.startTestResult(testcase.id, testcase.fullTitle());\n      })\n      .on(Runner.constants.EVENT_TEST_PASS, (testcase: Test) => {\n        void this.submitTestResult(testcase.id, TestResultStatus.PASSED);\n      })\n      .on(Runner.constants.EVENT_TEST_FAIL, (testcase: Test, error: Error) => {\n        void this.submitTestResult(\n          testcase.id,\n          TestResultStatus.FAILED,\n          error.message\n        );\n      })\n      .once(Runner.constants.EVENT_RUN_END, () => {\n        void this.runnerEnd();\n      });\n  }\n\n  runnerStart(tests: string[]): void {\n    this.testRunId = this.autoapi\n      .startTestRun({\n        tests,\n      })\n      .then(response => {\n        const runId = response.data.runId;\n        console.log('Test Run %d initialized', runId);\n        this.heartbeat = new TestRunHeartbeatService(runId, this.autoapi);\n        this.heartbeatStarted = this.heartbeat.start();\n        return runId;\n      });\n  }\n\n  startTestResult(id: string, testCaseName: string): void {\n    const parsedTestCase = this.parseTestCaseName(testCaseName);\n    this.uidToResultIdMap[id] = this.testRunId\n      ?.then(runId =>\n        this.autoapi.startTestCase({\n          testCaseName: parsedTestCase.testCaseName,\n          testCaseId: parsedTestCase.testRailTestCaseId,\n          testRunId: runId,\n          providerSessionIds: [],\n        })\n      )\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  submitTestResult(\n    id: string,\n    status: TestResultStatus,\n    errorMessage?: string\n  ): void {\n    this.uidSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId =>\n      this.autoapi.submitTestResult({\n        status: status,\n        testResultId: resultId,\n        failureReason: errorMessage,\n      })\n    );\n  }\n\n  async runnerEnd(): Promise<void> {\n    // Wait for the test run to be created and the heartbeat to be started\n    await this.testRunId;\n    await this.heartbeatStarted;\n    // End the heartbeat\n    await this.heartbeat?.end();\n    let resultIds: number[] = [];\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n\n    // Wait for all results to be created\n    void (await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch((reason: Error) => {\n        console.error(\n          `Unable to retrieve Applause TestResultIds ${reason.message}`\n        );\n      }));\n    const resultPromises: Promise<void>[] = Object.values(\n      this.uidSubmissionMap\n    );\n\n    // Wait for the results to be submitted\n    void (await Promise.all(resultPromises));\n\n    // Finally, end the test run\n    await this.autoapi.endTestRun((await this.testRunId) || 0);\n\n    // Fetch the provider session asset links\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n\n  private parseTestCaseName(testCaseName: string): ParsedTestCaseName {\n    // Split the name on spaces. We will reassemble after parsing out the other ids\n    const tokens = testCaseName.split(' ');\n    let testRailTestCaseId: string | undefined;\n    let applauseTestCaseId: string | undefined;\n    tokens.forEach(token => {\n      if (token?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)) {\n        if (testRailTestCaseId !== undefined) {\n          console.warn('Multiple TestRail case ids detected in testCase name');\n        }\n        testRailTestCaseId = token.substring(\n          this.TEST_RAIL_CASE_ID_PREFIX.length\n        );\n      } else if (token?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)) {\n        if (applauseTestCaseId !== undefined) {\n          console.warn('Multiple Applause case ids detected in testCase name');\n        }\n        applauseTestCaseId = token.substring(\n          this.APPLAUSE_CASE_ID_PREFIX.length\n        );\n      }\n    });\n    return {\n      applauseTestCaseId,\n      testRailTestCaseId,\n      testCaseName: tokens\n        .filter(\n          token =>\n            token !==\n            `${this.TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`\n        )\n        .filter(\n          token =>\n            token !==\n            `${this.APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`\n        )\n        .join(' '),\n    };\n  }\n}\n\ninterface ParsedTestCaseName {\n  testCaseName: string;\n  testRailTestCaseId?: string;\n  applauseTestCaseId?: string;\n}\n"],"names":["options","require","process","cwd","ApplauseReporter","reporters","Base","isSynchronised","undefined","this","autoapi","getCallsInFlight","constructor","runner","super","Promise","resolve","AutoApi","clientConfig","baseUrl","apiKey","productId","testRailOptions","testRail","once","Runner","constants","EVENT_SUITE_BEGIN","suite","tests","eachTest","t","push","parseTestCaseName","fullTitle","testCaseName","runnerStart","on","EVENT_TEST_BEGIN","testcase","startTestResult","id","EVENT_TEST_PASS","submitTestResult","TestResultStatus","PASSED","EVENT_TEST_FAIL","error","FAILED","message","EVENT_RUN_END","runnerEnd","testRunId","startTestRun","then","response","runId","data","console","log","heartbeat","TestRunHeartbeatService","heartbeatStarted","start","parsedTestCase","uidToResultIdMap","startTestCase","testCaseId","testRailTestCaseId","providerSessionIds","res","testResultId","status","errorMessage","uidSubmissionMap","resultId","failureReason","end","resultIds","valuePromises","Object","values","all","vals","catch","reason","resultPromises","endTestRun","jsonArray","getProviderSessionLinks","length","info","JSON","stringify","outputPath","writeFileSync","pathJoin","tokens","split","applauseTestCaseId","forEach","token","startsWith","TEST_RAIL_CASE_ID_PREFIX","warn","substring","APPLAUSE_CASE_ID_PREFIX","filter","join"],"mappings":"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"}