{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\nimport { ApplauseReporter, TestResultStatus, loadConfig, } from 'applause-reporter-common';\nimport { Runner } from 'mocha';\n// import * as cli from 'mocha/lib/cli';\nexport default class ApplauseMochaReporter extends reporters.Base {\n    reporter;\n    constructor(runner) {\n        super(runner);\n        const config = loadConfig();\n        this.reporter = new ApplauseReporter(config);\n        runner.once(Runner.constants.EVENT_SUITE_BEGIN, suite => {\n            // Parse each test case name from the suite\n            const tests = [];\n            suite.eachTest(t => tests.push(t.fullTitle()));\n            void this.reporter.runnerStart(tests);\n        });\n        /*\n         * make reporter to write to the output stream by default\n         */\n        runner\n            .on(Runner.constants.EVENT_TEST_BEGIN, (testcase) => {\n            void this.reporter.startTestCase(testcase.id, testcase.fullTitle());\n        })\n            .on(Runner.constants.EVENT_TEST_PASS, (testcase) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.PASSED);\n        })\n            .on(Runner.constants.EVENT_TEST_FAIL, (testcase, error) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.FAILED, { failureReason: error.message });\n        })\n            .once(Runner.constants.EVENT_RUN_END, () => {\n            void this.reporter.runnerEnd();\n        });\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["ApplauseMochaReporter","reporters","Base","reporter","constructor","runner","super","config","loadConfig","this","ApplauseReporter","once","Runner","constants","EVENT_SUITE_BEGIN","suite","tests","eachTest","t","push","fullTitle","runnerStart","on","EVENT_TEST_BEGIN","testcase","startTestCase","id","EVENT_TEST_PASS","submitTestCaseResult","TestResultStatus","PASSED","EVENT_TEST_FAIL","error","FAILED","failureReason","message","EVENT_RUN_END","runnerEnd"],"mappings":"uXAIe,MAAMA,UAA8BC,EAASA,UAACC,KACzDC,SACA,WAAAC,CAAYC,GACRC,MAAMD,GACN,MAAME,EAASC,EAAAA,aACfC,KAAKN,SAAW,IAAIO,EAAgBA,iBAACH,GACrCF,EAAOM,KAAKC,EAAAA,OAAOC,UAAUC,mBAAmBC,IAE5C,MAAMC,EAAQ,GACdD,EAAME,UAASC,GAAKF,EAAMG,KAAKD,EAAEE,eAC5BX,KAAKN,SAASkB,YAAYL,EAAM,IAKzCX,EACKiB,GAAGV,EAAAA,OAAOC,UAAUU,kBAAmBC,IACnCf,KAAKN,SAASsB,cAAcD,EAASE,GAAIF,EAASJ,YAAY,IAElEE,GAAGV,EAAAA,OAAOC,UAAUc,iBAAkBH,IAClCf,KAAKN,SAASyB,qBAAqBJ,EAASE,GAAIG,EAAAA,iBAAiBC,OAAO,IAE5ER,GAAGV,EAAMA,OAACC,UAAUkB,iBAAiB,CAACP,EAAUQ,KAC5CvB,KAAKN,SAASyB,qBAAqBJ,EAASE,GAAIG,mBAAiBI,OAAQ,CAAEC,cAAeF,EAAMG,SAAU,IAE9GxB,KAAKC,EAAMA,OAACC,UAAUuB,eAAe,KACjC3B,KAAKN,SAASkC,WAAW,GAErC"}