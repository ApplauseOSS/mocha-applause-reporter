{"version":3,"file":"index.min.js","sources":["../src/index.ts","../src/hooks.ts"],"sourcesContent":["import { reporters } from 'mocha';\nimport { ApplauseReporter, TestResultStatus, loadConfig, } from 'applause-reporter-common';\nimport { Runner } from 'mocha';\nimport { SESSION_ID_EVENT } from './hooks.ts';\nexport default class ApplauseMochaReporter extends reporters.Base {\n    reporter;\n    sessionIdMap = new Map();\n    constructor(runner) {\n        super(runner);\n        const config = loadConfig();\n        this.reporter = new ApplauseReporter(config);\n        runner.once(Runner.constants.EVENT_SUITE_BEGIN, suite => {\n            // Parse each test case name from the suite\n            const tests = [];\n            suite.eachTest(t => tests.push(t.fullTitle()));\n            void this.reporter.runnerStart(tests);\n        });\n        /*\n         * make reporter to write to the output stream by default\n         */\n        runner\n            .on(Runner.constants.EVENT_TEST_BEGIN, (testcase) => {\n            this.listenToSessionId(testcase);\n            void this.reporter.startTestCase(testcase.id, testcase.fullTitle());\n        })\n            .on(Runner.constants.EVENT_TEST_PASS, (testcase) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.PASSED, { providerSessionGuids: this.sessionIdMap.get(testcase.id) || [] });\n        })\n            .on(Runner.constants.EVENT_TEST_PENDING, (testcase) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.SKIPPED, { providerSessionGuids: this.sessionIdMap.get(testcase.id) || [] });\n        })\n            .on(Runner.constants.EVENT_TEST_FAIL, (testcase, error) => {\n            void this.reporter.submitTestCaseResult(testcase.id, TestResultStatus.FAILED, {\n                failureReason: error.message,\n                providerSessionGuids: this.sessionIdMap.get(testcase.id) || [],\n            });\n        })\n            .once(Runner.constants.EVENT_RUN_END, () => {\n            void this.reporter.runnerEnd();\n        });\n    }\n    recordSessionId(id, sessionId) {\n        this.sessionIdMap.set(id, [\n            ...(this.sessionIdMap.get(id) || []),\n            sessionId,\n        ]);\n    }\n    listenToSessionId(test) {\n        test.on(SESSION_ID_EVENT, (sessionId) => this.recordSessionId(test.id, sessionId));\n    }\n}\n//# sourceMappingURL=index.js.map","import { Hook, Test } from 'mocha';\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\nexport function registerSessionIdHook(sessionIdLookup) {\n    return function () {\n        if (this.test instanceof Hook &&\n            !this.test.title.startsWith('\"before each\"')) {\n            console.warn('Can only register session id in the beforeEach hook');\n            return;\n        }\n        registerSessionId.apply(this, [sessionIdLookup()]);\n    };\n}\nexport function registerSessionId(sessionId) {\n    // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n    // we want to emit the event on the currentTest, not the test (which is actually the hook)\n    if (this.test instanceof Test) {\n        this.test?.emit(SESSION_ID_EVENT, JSON.stringify({ fullTitle: this.test?.fullTitle(), sessionId }));\n    }\n    else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n        this.currentTest?.emit(SESSION_ID_EVENT, JSON.stringify({ fullTitle: this.currentTest?.fullTitle(), sessionId }));\n    }\n}\n//# sourceMappingURL=hooks.js.map"],"names":["ApplauseMochaReporter","reporters","Base","reporter","sessionIdMap","Map","constructor","runner","super","config","loadConfig","this","ApplauseReporter","once","Runner","constants","EVENT_SUITE_BEGIN","suite","tests","eachTest","t","push","fullTitle","runnerStart","on","EVENT_TEST_BEGIN","testcase","listenToSessionId","startTestCase","id","EVENT_TEST_PASS","submitTestCaseResult","TestResultStatus","PASSED","providerSessionGuids","get","EVENT_TEST_PENDING","SKIPPED","EVENT_TEST_FAIL","error","FAILED","failureReason","message","EVENT_RUN_END","runnerEnd","recordSessionId","sessionId","set","test"],"mappings":"uXAIe,MAAMA,UAA8BC,EAASA,UAACC,KACzDC,SACAC,aAAe,IAAIC,IACnB,WAAAC,CAAYC,GACRC,MAAMD,GACN,MAAME,EAASC,EAAAA,aACfC,KAAKR,SAAW,IAAIS,EAAgBA,iBAACH,GACrCF,EAAOM,KAAKC,EAAAA,OAAOC,UAAUC,mBAAmBC,IAE5C,MAAMC,EAAQ,GACdD,EAAME,UAASC,GAAKF,EAAMG,KAAKD,EAAEE,eAC5BX,KAAKR,SAASoB,YAAYL,EAAM,IAKzCX,EACKiB,GAAGV,EAAAA,OAAOC,UAAUU,kBAAmBC,IACxCf,KAAKgB,kBAAkBD,GAClBf,KAAKR,SAASyB,cAAcF,EAASG,GAAIH,EAASJ,YAAY,IAElEE,GAAGV,EAAAA,OAAOC,UAAUe,iBAAkBJ,IAClCf,KAAKR,SAAS4B,qBAAqBL,EAASG,GAAIG,EAAgBA,iBAACC,OAAQ,CAAEC,qBAAsBvB,KAAKP,aAAa+B,IAAIT,EAASG,KAAO,IAAK,IAEhJL,GAAGV,EAAAA,OAAOC,UAAUqB,oBAAqBV,IACrCf,KAAKR,SAAS4B,qBAAqBL,EAASG,GAAIG,EAAgBA,iBAACK,QAAS,CAAEH,qBAAsBvB,KAAKP,aAAa+B,IAAIT,EAASG,KAAO,IAAK,IAEjJL,GAAGV,EAAMA,OAACC,UAAUuB,iBAAiB,CAACZ,EAAUa,KAC5C5B,KAAKR,SAAS4B,qBAAqBL,EAASG,GAAIG,EAAgBA,iBAACQ,OAAQ,CAC1EC,cAAeF,EAAMG,QACrBR,qBAAsBvB,KAAKP,aAAa+B,IAAIT,EAASG,KAAO,IAC9D,IAEDhB,KAAKC,EAAMA,OAACC,UAAU4B,eAAe,KACjChC,KAAKR,SAASyC,WAAW,GAErC,CACD,eAAAC,CAAgBhB,EAAIiB,GAChBnC,KAAKP,aAAa2C,IAAIlB,EAAI,IAClBlB,KAAKP,aAAa+B,IAAIN,IAAO,GACjCiB,GAEP,CACD,iBAAAnB,CAAkBqB,GACdA,EAAKxB,GC/CmB,gCD+CGsB,GAAcnC,KAAKkC,gBAAgBG,EAAKnB,GAAIiB,IAC1E"}