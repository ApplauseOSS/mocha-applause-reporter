{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\n\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { Runner } from 'mocha';\nimport { ApplauseOptions } from './applause-options';\nimport { Test } from 'mocha';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\nconst _options = require(process.cwd() + '/applause.json');\nconst options = _options as ApplauseOptions;\n\n// import * as cli from 'mocha/lib/cli';\n\nexport default class ApplauseReporter extends reporters.Base {\n  private autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(runner: Runner) {\n    super(runner);\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      groupingName: options.groupingName,\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n      .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n        this.uidToResultIdMap[testcase.id] = this.autoapi\n          .startTestCase(testcase.fullTitle())\n          .then(res => {\n            return res.data.testResultId;\n          });\n      })\n      .on(Runner.constants.EVENT_TEST_PASS, (testcase: Test) => {\n        void this.submitTestResult(testcase.id, TestResultStatus.PASSED);\n      })\n      .on(Runner.constants.EVENT_TEST_FAIL, (testcase: Test, error: Error) => {\n        void this.submitTestResult(\n          testcase.id,\n          TestResultStatus.FAILED,\n          error.message\n        );\n      })\n      .once(Runner.constants.EVENT_RUN_END, () => {\n        void this.runnerEnd();\n      });\n  }\n\n  async submitTestResult(\n    id: string,\n    status: TestResultStatus,\n    errorMessage?: string\n  ): Promise<void> {\n    return this.autoapi.submitTestResult(\n      await this.uidToResultIdMap[id],\n      status,\n      errorMessage\n    );\n  }\n\n  async runnerEnd(): Promise<void> {\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n    let resultIds: number[] = [];\n    void (await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch((reason: Error) => {\n        console.error(\n          `Unable to retrieve Applause TestResultIds ${reason.message}`\n        );\n      }));\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n}\n"],"names":["options","require","process","cwd","ApplauseReporter","reporters","Base","isSynchronised","undefined","this","autoapi","getCallsInFlight","constructor","runner","super","AutoApi","clientConfig","baseUrl","apiKey","productId","groupingName","on","Runner","constants","EVENT_TEST_BEGIN","testcase","uidToResultIdMap","id","startTestCase","fullTitle","then","res","data","testResultId","EVENT_TEST_PASS","submitTestResult","TestResultStatus","PASSED","EVENT_TEST_FAIL","error","FAILED","message","once","EVENT_RUN_END","runnerEnd","async","status","errorMessage","valuePromises","Object","values","resultIds","Promise","all","vals","catch","reason","console","jsonArray","getProviderSessionLinks","length","info","JSON","stringify","outputPath","writeFileSync","pathJoin"],"mappings":"8ZASA,MACMA,EADWC,QAAQC,QAAQC,MAAQ,wBAKpBC,UAAyBC,YAAUC,KAOlDC,qBACF,YAAwBC,IAAjBC,KAAKC,SAE0B,IAAlCD,KAAKC,QAAQC,iBAGnBC,YAAYC,GACVC,MAAMD,GAZAJ,sBAAoD,GAa1DA,KAAKC,QAAU,IAAIK,UAAQ,CACzBC,aAAc,CACZC,QAASjB,EAAQiB,QACjBC,OAAQlB,EAAQkB,QAElBC,UAAWnB,EAAQmB,UACnBC,aAAcpB,EAAQoB,eAKxBP,EACGQ,GAAGC,SAAOC,UAAUC,kBAAmBC,IACtChB,KAAKiB,iBAAiBD,EAASE,IAAMlB,KAAKC,QACvCkB,cAAcH,EAASI,aACvBC,MAAKC,GACGA,EAAIC,KAAKC,cAChB,IAELZ,GAAGC,SAAOC,UAAUW,iBAAkBT,IAChChB,KAAK0B,iBAAiBV,EAASE,GAAIS,mBAAiBC,OAAO,IAEjEhB,GAAGC,SAAOC,UAAUe,iBAAiB,CAACb,EAAgBc,KAChD9B,KAAK0B,iBACRV,EAASE,GACTS,mBAAiBI,OACjBD,EAAME,QACP,IAEFC,KAAKpB,SAAOC,UAAUoB,eAAe,KAC/BlC,KAAKmC,WAAW,IAI3BC,uBACElB,EACAmB,EACAC,GAEA,OAAOtC,KAAKC,QAAQyB,uBACZ1B,KAAKiB,iBAAiBC,GAC5BmB,EACAC,GAIJF,kBACE,MAAMG,EAAmCC,OAAOC,OAC9CzC,KAAKiB,kBAEP,IAAIyB,EAAsB,SACdC,QAAQC,IAAIL,GACrBlB,MAAKwB,GAASH,EAAoB,MAARG,EAAe,GAAKA,IAC9CC,OAAOC,IACNC,QAAQlB,MACN,6CAA6CiB,EAAOf,UACrD,IAEL,MACMiB,SADajD,KAAKC,QAAQiD,wBAAwBR,IACjCnB,MAAQ,GAC/B,GAAI0B,EAAUE,OAAS,EAAG,CACxBH,QAAQI,KAAKC,KAAKC,UAAUL,IAE5B,MAAMM,EAAa,IACnBC,gBACEC,OAASF,EAAY,oBACrBF,KAAKC,UAAUL,EAAW,KAAM"}