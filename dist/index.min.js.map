{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\n\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { Runner } from 'mocha';\nimport { ApplauseOptions } from './applause-options';\nimport { Test } from 'mocha';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\nconst _options = require(process.cwd() + \"/applause.json\");\nconst options = _options as ApplauseOptions;\n\n// import * as cli from 'mocha/lib/cli';\n\nexport default class ApplauseReporter extends reporters.Base  {\n  private autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(runner: Runner) {\n    super(runner);\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      groupingName: options.groupingName,\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n    .once(Runner.constants.EVENT_RUN_BEGIN, () => {\n      console.log('run start');\n    })\n    .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n      console.log(\"test begin\");\n      this.uidToResultIdMap[testcase.id] = this.autoapi.startTestCase(\n        testcase.fullTitle()\n      ).then(res => {\n        return res.data.testResultId;\n      });\n    })\n    .on(Runner.constants.EVENT_TEST_PASS, async (testcase: Test) => {\n      console.log(\"test pass\");\n      this.autoapi.submitTestResult(\n        await this.uidToResultIdMap[testcase.id], \n        TestResultStatus.PASSED);\n    })\n    .on(Runner.constants.EVENT_TEST_FAIL, async(testcase: Test, error: Error) => {\n      console.log(\"test fail\");\n      this.autoapi.submitTestResult(\n        await this.uidToResultIdMap[testcase.id], \n        TestResultStatus.FAILED,\n        error.message);\n    })\n    .once(Runner.constants.EVENT_RUN_END, async() => {\n      console.log(\"run end\");\n      const valuePromises: Promise<number>[] = Object.values(\n        this.uidToResultIdMap\n      );\n      let resultIds: number[] = [];\n      await Promise.all(valuePromises)\n        .then(vals => (resultIds = vals == null ? [] : vals))\n        .catch((reason) => console.error(`Unable to retrieve Applause TestResultIds ${reason}`));\n      const resp = await this.autoapi!.getProviderSessionLinks(resultIds);\n      const jsonArray = resp.data || [];\n      if (jsonArray.length > 0) {\n        console.info(JSON.stringify(jsonArray));\n        // this is the wdio.conf outputDir\n        const outputPath = '.';\n        writeFileSync(\n          pathJoin(outputPath, 'providerUrls.txt'),\n          JSON.stringify(jsonArray, null, 1)\n        );\n      }\n    });\n  }\n}\n"],"names":["options","require","process","cwd","ApplauseReporter","reporters","Base","isSynchronised","undefined","this","autoapi","getCallsInFlight","constructor","runner","super","AutoApi","clientConfig","baseUrl","apiKey","productId","groupingName","once","Runner","constants","EVENT_RUN_BEGIN","console","log","on","EVENT_TEST_BEGIN","testcase","uidToResultIdMap","id","startTestCase","fullTitle","then","res","data","testResultId","EVENT_TEST_PASS","async","submitTestResult","TestResultStatus","PASSED","EVENT_TEST_FAIL","error","FAILED","message","EVENT_RUN_END","valuePromises","Object","values","resultIds","Promise","all","vals","catch","reason","jsonArray","getProviderSessionLinks","length","info","JSON","stringify","outputPath","writeFileSync","pathJoin"],"mappings":"8ZASA,MACMA,EADWC,QAAQC,QAAQC,MAAQ,wBAKpBC,UAAyBC,YAAUC,KAOlDC,qBACF,YAAwBC,IAAjBC,KAAKC,SAE0B,IAAlCD,KAAKC,QAAQC,iBAGnBC,YAAYC,GACVC,MAAMD,GAZAJ,sBAAoD,GAa1DA,KAAKC,QAAU,IAAIK,UAAQ,CACzBC,aAAc,CACZC,QAASjB,EAAQiB,QACjBC,OAAQlB,EAAQkB,QAElBC,UAAWnB,EAAQmB,UACnBC,aAAcpB,EAAQoB,eAKxBP,EACCQ,KAAKC,SAAOC,UAAUC,iBAAiB,KACtCC,QAAQC,IAAI,YAAY,IAEzBC,GAAGL,SAAOC,UAAUK,kBAAmBC,IACtCJ,QAAQC,IAAI,cACZjB,KAAKqB,iBAAiBD,EAASE,IAAMtB,KAAKC,QAAQsB,cAChDH,EAASI,aACTC,MAAKC,GACEA,EAAIC,KAAKC,cAChB,IAEHV,GAAGL,SAAOC,UAAUe,iBAAiBC,MAAOV,IAC3CJ,QAAQC,IAAI,aACZjB,KAAKC,QAAQ8B,uBACL/B,KAAKqB,iBAAiBD,EAASE,IACrCU,mBAAiBC,OAAO,IAE3Bf,GAAGL,SAAOC,UAAUoB,iBAAiBJ,MAAMV,EAAgBe,KAC1DnB,QAAQC,IAAI,aACZjB,KAAKC,QAAQ8B,uBACL/B,KAAKqB,iBAAiBD,EAASE,IACrCU,mBAAiBI,OACjBD,EAAME,QAAQ,IAEjBzB,KAAKC,SAAOC,UAAUwB,eAAeR,UACpCd,QAAQC,IAAI,WACZ,MAAMsB,EAAmCC,OAAOC,OAC9CzC,KAAKqB,kBAEP,IAAIqB,EAAsB,SACpBC,QAAQC,IAAIL,GACfd,MAAKoB,GAASH,EAAoB,MAARG,EAAe,GAAKA,IAC9CC,OAAOC,GAAW/B,QAAQmB,MAAM,6CAA6CY,OAChF,MACMC,SADahD,KAAKC,QAASgD,wBAAwBP,IAClCf,MAAQ,GAC/B,GAAIqB,EAAUE,OAAS,EAAG,CACxBlC,QAAQmC,KAAKC,KAAKC,UAAUL,IAE5B,MAAMM,EAAa,IACnBC,gBACEC,OAASF,EAAY,oBACrBF,KAAKC,UAAUL,EAAW,KAAM"}