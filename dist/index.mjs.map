{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\n\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { Runner } from 'mocha';\nimport { ApplauseOptions } from './applause-options';\nimport { Test } from 'mocha';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\nconst _options = require(process.cwd() + \"/applause.json\");\nconst options = _options as ApplauseOptions;\n\n// import * as cli from 'mocha/lib/cli';\n\nexport default class ApplauseReporter extends reporters.Base  {\n  private autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(runner: Runner) {\n    super(runner);\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      groupingName: options.groupingName,\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n    .once(Runner.constants.EVENT_RUN_BEGIN, () => {\n      console.log('run start');\n    })\n    .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n      console.log(\"test begin\");\n      this.uidToResultIdMap[testcase.id] = this.autoapi.startTestCase(\n        testcase.fullTitle()\n      ).then(res => {\n        return res.data.testResultId;\n      });\n    })\n    .on(Runner.constants.EVENT_TEST_PASS, async (testcase: Test) => {\n      console.log(\"test pass\");\n      this.autoapi.submitTestResult(\n        await this.uidToResultIdMap[testcase.id], \n        TestResultStatus.PASSED);\n    })\n    .on(Runner.constants.EVENT_TEST_FAIL, async(testcase: Test, error: Error) => {\n      console.log(\"test fail\");\n      this.autoapi.submitTestResult(\n        await this.uidToResultIdMap[testcase.id], \n        TestResultStatus.FAILED,\n        error.message);\n    })\n    .once(Runner.constants.EVENT_RUN_END, async() => {\n      console.log(\"run end\");\n      const valuePromises: Promise<number>[] = Object.values(\n        this.uidToResultIdMap\n      );\n      let resultIds: number[] = [];\n      await Promise.all(valuePromises)\n        .then(vals => (resultIds = vals == null ? [] : vals))\n        .catch((reason) => console.error(`Unable to retrieve Applause TestResultIds ${reason}`));\n      const resp = await this.autoapi!.getProviderSessionLinks(resultIds);\n      const jsonArray = resp.data || [];\n      if (jsonArray.length > 0) {\n        console.info(JSON.stringify(jsonArray));\n        // this is the wdio.conf outputDir\n        const outputPath = '.';\n        writeFileSync(\n          pathJoin(outputPath, 'providerUrls.txt'),\n          JSON.stringify(jsonArray, null, 1)\n        );\n      }\n    });\n  }\n}\n"],"names":["pathJoin"],"mappings":"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"}