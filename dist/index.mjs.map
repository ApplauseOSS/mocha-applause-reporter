{"version":3,"file":"index.mjs","sources":["../src/hooks.ts","../src/index.ts"],"sourcesContent":["import { Hook, Test } from 'mocha';\n\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\n\nexport function registerSessionIdHook(\n  sessionIdLookup: () => string | undefined\n) {\n  return function (this: Mocha.Context) {\n    if (\n      this.test instanceof Hook &&\n      !this.test.title.startsWith('\"before each\"')\n    ) {\n      console.warn('Can only register session id in the beforeEach hook');\n      return;\n    }\n    registerSessionId.apply(this, [sessionIdLookup()]);\n  };\n}\n\nexport function registerSessionId(\n  this: Mocha.Context,\n  sessionId: string | undefined\n) {\n  // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n  // we want to emit the event on the currentTest, not the test (which is actually the hook)\n  if (this.test instanceof Test) {\n    this.test?.emit(\n      SESSION_ID_EVENT,\n      JSON.stringify({ fullTitle: this.test?.fullTitle(), sessionId })\n    );\n  } else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n    this.currentTest?.emit(\n      SESSION_ID_EVENT,\n      JSON.stringify({ fullTitle: this.currentTest?.fullTitle(), sessionId })\n    );\n  }\n}\n","import { reporters } from 'mocha';\n\nimport {\n  ApplauseReporter,\n  TestResultStatus,\n  loadConfig,\n} from 'applause-reporter-common';\nimport { Runner } from 'mocha';\nimport { Test } from 'mocha';\nimport { SESSION_ID_EVENT } from './hooks.ts';\n\nexport default class ApplauseMochaReporter extends reporters.Base {\n  private reporter: ApplauseReporter;\n  private sessionIdMap: Map<string, string[]> = new Map();\n\n  constructor(runner: Runner) {\n    super(runner);\n    const config = loadConfig();\n    this.reporter = new ApplauseReporter(config);\n\n    runner.once(Runner.constants.EVENT_SUITE_BEGIN, suite => {\n      // Parse each test case name from the suite\n      const tests: string[] = [];\n      suite.eachTest(t => tests.push(t.fullTitle()));\n      void this.reporter.runnerStart(tests);\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n      .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n        this.listenToSessionId(testcase);\n        void this.reporter.startTestCase(testcase.id, testcase.fullTitle());\n      })\n      .on(Runner.constants.EVENT_TEST_PASS, (testcase: Test) => {\n        void this.reporter.submitTestCaseResult(\n          testcase.id,\n          TestResultStatus.PASSED,\n          { providerSessionGuids: this.sessionIdMap.get(testcase.id) || [] }\n        );\n      })\n      .on(Runner.constants.EVENT_TEST_PENDING, (testcase: Test) => {\n        void this.reporter.submitTestCaseResult(\n          testcase.id,\n          TestResultStatus.SKIPPED,\n          { providerSessionGuids: this.sessionIdMap.get(testcase.id) || [] }\n        );\n      })\n      .on(Runner.constants.EVENT_TEST_FAIL, (testcase: Test, error: Error) => {\n        void this.reporter.submitTestCaseResult(\n          testcase.id,\n          TestResultStatus.FAILED,\n          {\n            failureReason: error.message,\n            providerSessionGuids: this.sessionIdMap.get(testcase.id) || [],\n          }\n        );\n      })\n      .once(Runner.constants.EVENT_RUN_END, () => {\n        void this.reporter.runnerEnd();\n      });\n  }\n\n  private recordSessionId(id: string, sessionId: string) {\n    this.sessionIdMap.set(id, [\n      ...(this.sessionIdMap.get(id) || []),\n      sessionId,\n    ]);\n  }\n\n  private listenToSessionId(test: Test): void {\n    test.on(SESSION_ID_EVENT, (sessionId: string) =>\n      this.recordSessionId(test.id, sessionId)\n    );\n  }\n}\n"],"names":[],"mappings":"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"}