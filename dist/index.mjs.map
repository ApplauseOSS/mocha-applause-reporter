{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import { reporters } from 'mocha';\n\n// eslint-disable-next-line node/no-extraneous-import\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { Runner } from 'mocha';\nimport { ApplauseOptions } from './applause-options';\nimport { Test } from 'mocha';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\nconst _options = require(process.cwd() + '/applause.json');\nconst options = _options as ApplauseOptions;\n\n// import * as cli from 'mocha/lib/cli';\n\nexport default class ApplauseReporter extends reporters.Base {\n  private autoapi: AutoApi;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised(): boolean {\n    return this.autoapi === undefined\n      ? false\n      : this.autoapi.getCallsInFlight === 0;\n  }\n\n  constructor(runner: Runner) {\n    super(runner);\n    this.autoapi = new AutoApi({\n      clientConfig: {\n        baseUrl: options.baseUrl,\n        apiKey: options.apiKey,\n      },\n      productId: options.productId,\n      groupingName: options.groupingName,\n    });\n    /*\n     * make reporter to write to the output stream by default\n     */\n    runner\n      .on(Runner.constants.EVENT_TEST_BEGIN, (testcase: Test) => {\n        this.uidToResultIdMap[testcase.id] = this.autoapi\n          .startTestCase(testcase.fullTitle())\n          .then(res => {\n            return res.data.testResultId;\n          });\n      })\n      .on(Runner.constants.EVENT_TEST_PASS, (testcase: Test) => {\n        void this.submitTestResult(testcase.id, TestResultStatus.PASSED);\n      })\n      .on(Runner.constants.EVENT_TEST_FAIL, (testcase: Test, error: Error) => {\n        void this.submitTestResult(\n          testcase.id,\n          TestResultStatus.FAILED,\n          error.message\n        );\n      })\n      .once(Runner.constants.EVENT_RUN_END, () => {\n        void this.runnerEnd();\n      });\n  }\n\n  async submitTestResult(\n    id: string,\n    status: TestResultStatus,\n    errorMessage?: string\n  ): Promise<void> {\n    return this.autoapi.submitTestResult(\n      await this.uidToResultIdMap[id],\n      status,\n      errorMessage\n    );\n  }\n\n  async runnerEnd(): Promise<void> {\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n    let resultIds: number[] = [];\n    void (await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch((reason: Error) => {\n        console.error(\n          `Unable to retrieve Applause TestResultIds ${reason.message}`\n        );\n      }));\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n}\n"],"names":["pathJoin"],"mappings":"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"}