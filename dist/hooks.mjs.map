{"version":3,"file":"hooks.mjs","sources":["../src/hooks.ts"],"sourcesContent":["import { Hook, Test } from 'mocha';\n\nexport const SESSION_ID_EVENT = 'applause-session-id-register';\n\nexport function registerSessionIdHook(\n  sessionIdLookup: () => string | undefined\n) {\n  return function (this: Mocha.Context) {\n    if (\n      this.test instanceof Hook &&\n      !this.test.title.startsWith('\"before each\"')\n    ) {\n      console.warn('Can only register session id in the beforeEach hook');\n      return;\n    }\n    registerSessionId.apply(this, [sessionIdLookup()]);\n  };\n}\n\nexport function registerSessionId(\n  this: Mocha.Context,\n  sessionId: string | undefined\n) {\n  // this: Mocha.Context can be executed for either a Hook for a test. If this is being executed for a Hook,\n  // we want to emit the event on the currentTest, not the test (which is actually the hook)\n  if (this.test instanceof Test) {\n    this.test?.emit(SESSION_ID_EVENT, sessionId);\n  } else if (this.test instanceof Hook && this.currentTest instanceof Test) {\n    this.currentTest?.emit(SESSION_ID_EVENT, sessionId);\n  }\n}\n"],"names":[],"mappings":";;AAEO,MAAM,gBAAgB,GAAG,+BAA+B;AAEzD,SAAU,qBAAqB,CACnC,eAAyC,EAAA;IAEzC,OAAO,YAAA;AACL,QAAA,IACE,IAAI,CAAC,IAAI,YAAY,IAAI;YACzB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,EAC5C;AACA,YAAA,OAAO,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;YACpE,OAAO;SACR;QACD,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;AACrD,KAAC,CAAC;AACJ,CAAC;AAEK,SAAU,iBAAiB,CAE/B,SAA6B,EAAA;;;AAI7B,IAAA,IAAI,IAAI,CAAC,IAAI,YAAY,IAAI,EAAE;QAC7B,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;KAC9C;AAAM,SAAA,IAAI,IAAI,CAAC,IAAI,YAAY,IAAI,IAAI,IAAI,CAAC,WAAW,YAAY,IAAI,EAAE;QACxE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;KACrD;AACH;;;;"}